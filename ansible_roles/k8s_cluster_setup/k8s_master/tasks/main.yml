---
# tasks file for k8s_master
- name: "Configuring yum for the docker"
  yum_repository:
          name: docker
          file: docker
          description: Configure the Docker Community Edition repo
          baseurl: https://download.docker.com/linux/centos/7/x86_64/stable/
          gpgcheck: no
  register: docker_yum_status


- name: "Docker Yum Cofiguration"
  debug:
   msg: "is the Docker Yum Configured  -> {{  docker_yum_status.failed }}"

- name: "Installing Docker ....."
  package:
      name: "docker-ce-18.09.1-3.el7.x86_64"
      state: present
  register: installation_status     

- name: "Installation Status"
  debug:
          msg: "Docker Installation Code  -> {{ installation_status.rc }}"

- name: "Starting the Docker Services"
  service:
          name: docker
          state: started
          enabled: yes
  register: service_status

- name: "Service Status"
  debug:
          msg: "Docker Service Code -> {{ service_status.state }}"

# Configuring Yum for the kubernetes Repository
- name: "configuring k8s Yum Repository"
  yum_repository:
          name: kubernetes
          file: kubernetes
          description: Configure the k8s repo
          baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
          gpgcheck: yes
          enabled: 1
          repo_gpgcheck: 1
          gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          exclude:
                  - kubelet
                  - kubeadm
                  - kubectl
  register: repo_status

- name: "k8s repo Status"
  debug:
          msg: "is k8s repo is configured ? => {{ repo_status.failed }}"

# Stoping SELINUX security
- name: disabling selinux security
  selinux:
          state: permissive
          policy: targeted
  register: selinux_status

- name: "selinux status"
  debug:
          msg: "SeLinux Status => {{ selinux_status.failed }}"

- name: "Running an Command for SELINUX"
  shell: "sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config"
  changed_when: false

#Installing the required software for setup of k9s
- name: "Installing kubeadm, kubectl, kubelet"
  yum:
          name: "{{ item }}"
          state: present
          disable_excludes: kubernetes
  loop: "{{ softwares }}"

#Starting and Enabling the kubelet
- name: "Starting the Kubelet Service"
  service:
     name: kubelet
     state: started
     enabled: yes

#Pulling the Images using kubeadm
- name: "Pulling the docker images using kubeadm"
  shell: "kubeadm config images pull"
  changed_when: false

#Changing the driver of docker from the cgroupfs to systemd
- name: "Changing the driver in the docker"
  copy:
   content: |
         {
            "exec-opts": ["native.cgroupdriver=systemd"]
         }
   dest: /etc/docker/daemon.json
  register: driver_change

- name: "Driver Change Info"
  debug:
          msg: "is Docker Driver Changed ? -> {{ driver_change.failed }}"

- name: "Restarting Docker"
  service:
          name: docker
          state: restarted
  when: driver_change.changed == true

#Installing the iproute-tc software
- name: "Installing iproute-tc"
  package:
          name: iproute-tc
          state: present

# Initialing Master
- name: "Initializing Master"
  shell: "kubeadm init --pod-network-cidr={{ cidr }} --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem --node-name=master"
  ignore_errors: yes

# Creating the .kube directory
- name: "Creating .kube directory"
  shell: "mkdir -p $HOME/.kube"

# Copying the /etc/k8s/admin.conf$HOME/.kube/config
- name: "Copying /etc/kubernetes/admin.conf $HOME/.kube/config"
  shell: "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"

# Changing the owner permission of $HOME/.kube/config
- name: "changing owner permission"
  shell: "sudo chown $(id -u):$(id -g) $HOME/.kube/config"

# Lets Genrate token so that slave can join that cluster
- name: "Generating Token"
  shell: "kubeadm token create  --print-join-command"
  register: token
  ignore_errors: yes

- debug: 
   var: token.stdout_lines
  register: token

#Adding the Flannel Overlay NetWork for the Communication
# Adding the support of Flannel Network for Overlay Network
- name: Adding Flannel Network
  command:
          cmd: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  register: Flannel_status

- name: Flannel Network Status
  debug:
          msg: "Flanner Network Status => {{ Flannel_status.failed }}"  
